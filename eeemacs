
(add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-safe-themes
   '("a0be7a38e2de974d1598cf247f607d5c1841dbcef1ccd97cded8bea95a7c7639" "a27c00821ccfd5a78b01e4f35dc056706dd9ede09a8b90c6955ae6a390eb1c1e" "3c83b3676d796422704082049fc38b6966bcad960f896669dfc21a7a37a748fa" default))
 '(global-display-line-numbers-mode t)
 '(grep-find-ignored-directories
   '("SCCS" "RCS" "CVS" "MCVS" ".src" ".svn" ".git" ".hg" ".bzr" "_MTN" "_darcs" "{arch}" ".cache"))
 '(helm-grep-ignored-directories
   '("SCCS/" "RCS/" "CVS/" "MCVS/" ".svn/" ".git/" ".hg/" ".bzr/" "_MTN/" "_darcs/" "{arch}/" ".gvfs/" ".cache/"))
 '(hl-todo-keyword-faces
   '(("TODO" . "#dc752f")
     ("NEXT" . "#dc752f")
     ("THEM" . "#2d9574")
     ("PROG" . "#4f97d7")
     ("OKAY" . "#4f97d7")
     ("DONT" . "#f2241f")
     ("FAIL" . "#f2241f")
     ("DONE" . "#86dc2f")
     ("NOTE" . "#b1951d")
     ("KLUDGE" . "#b1951d")
     ("HACK" . "#b1951d")
     ("TEMP" . "#b1951d")
     ("FIXME" . "#dc752f")
     ("XXX+" . "#dc752f")
     ("\\?\\?\\?+" . "#dc752f")))
 '(lsp-clients-clangd-args
   '("--header-insertion-decorators=0" "--header-insertion=never" "--completion-style=detailed" "--background-index" "--limit-results=500"))
 '(org-fontify-done-headline nil)
 '(org-fontify-todo-headline nil)
 '(package-selected-packages
   '(company-posframe telega doom-modeline clang-format json-mode yaml-mode clojure-mode lsp-mode helm projectile company-box smart-mode-line fira-code-mode sml-modeline go-mode lsp-ui cider lsp-treemacs flycheck company))
 '(show-paren-mode t)
 '(tool-bar-mode nil))


;;; Package settings
(require 'package)
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
(package-initialize)
(setq package-selected-packages '(clojure-mode lsp-mode helm projectile
					       company-box  smart-mode-line fira-code-mode sml-modeline go-mode lsp-ui
					       cider lsp-treemacs flycheck company ))


;;; Clojure settings
(when (cl-find-if-not #'package-installed-p package-selected-packages)
  (package-refresh-contents)
  (mapc #'package-install package-selected-packages))

(add-hook 'clojure-mode-hook 'lsp)
(add-hook 'clojurescript-mode-hook 'lsp)
(add-hook 'clojurec-mode-hook 'lsp)
(eval-after-load 'clojure-mode '(require 'clojure-mode-extra-font-locking))
(setq lsp-clojure-custom-server-command '("bash" "-c" "~/.emacs.d/clojure-lsp"))

;;; Company
(add-hook 'after-init-hook 'global-company-mode)
;;(global-set-key (kbd "M-/") 'company-complete-common-or-cycle)
(setq company-idle-delay 0)
(setq company-global-modes '(not shell-mode))
 
(add-hook 'c-mode-hook 'lsp)
(add-hook 'c++-mode-hook 'lsp)
;;;;
;;;flycheck
;;(global-flycheck-mode)
(require 'helm-config)

;;; Helm
(setq ;;to end or beginning of source when reaching top or bottom of source.
 helm-move-to-line-cycle-in-source t
 ;; search for library in `require' and `declare-function' sexp.
 helm-ff-search-library-in-sexp t
 ;; scroll 8 lines other window using M-<next>/M-<prior>
 helm-scroll-amount 8
 helm-ff-file-name-history-use-recentf t
 helm-echo-input-in-header-line t)

(global-set-key (kbd "M-x") 'helm-M-x)
(setq helm-M-x-fuzzy-match t) ;; optional fuzzy matching for helm-M-x

(global-set-key (kbd "C-x C-f") 'helm-find-files)

(global-set-key (kbd "M-y") 'helm-show-kill-ring)

(global-set-key (kbd "C-x b") 'helm-mini)

(setq helm-buffers-fuzzy-matching t
      helm-recentf-fuzzy-match t)

(global-set-key (kbd "C-h SPC") 'helm-all-mark-rings)

;; open helm buffer inside current window, not occupy whole other window
(setq helm-split-window-in-side-p t)
(setq helm-autoresize-max-height 50)
(setq helm-autoresize-min-height 30)
;;(helm-autoresize-mode 1)
(helm-mode 1)


(define-key helm-find-files-map (kbd "TAB") 'helm-execute-persistent-action)
;(define-key helm-find-files-map (kbd "<backspace>") 'helm-find-files-up-one-level)
;;(define-key helm- (kbd "TAB") 'helm-execute-persistent-action)

;;; projectile
(projectile-global-mode)


;;; Display
(global-display-line-numbers-mode)

(setq inhibit-splash-screen   t)
(setq ingibit-startup-message t) ;; экран приветствия можно вызвать комбинацией C-h C-a

;; Show-paren-mode settings
(show-paren-mode t) ;; включить выделение выражений между {},[],()
;(setq show-paren-style 'expression) ;; выделить цветом выражения между {},[],()

(electric-pair-mode    1) ;; автозакрытие {},[],() с переводом курсора внутрь скобок
(electric-indent-mode 1) ;; ; отключить индентацию  electric-indent-mod'ом (default in Emacs-24.4)


(setq auto-save-list-file-name nil)
(setq auto-save-default nil)

(global-set-key (kbd "C-,") (kbd "RET"))
;;(global-set-key (kbd "C--") (kbd "C-/"))
(global-unset-key "\C-z")
(global-set-key "\C-z" 'advertised-undo)

(global-set-key (kbd "<C-tab>") 'next-buffer)
(setq tab-width 8)
(global-visual-line-mode t)
(global-unset-key (kbd "S-<up>") )
(global-unset-key (kbd "S-<down>") )
(global-unset-key (kbd "S-<left>") ) 
(global-unset-key (kbd "S-<right>") )
(global-set-key (kbd "C-o") 'next-multiframe-window)

(setq window-size-fixed nil)

(global-unset-key (kbd "M-;") )
(global-unset-key (kbd "M-:") )
(global-set-key (kbd "M-;") 'eval-expression)
(global-unset-key (kbd "M-!") )
(global-set-key (kbd "M-1") 'shell-command)

(global-set-key (kbd "C-x C-b") 'ibuffer)
(define-key ibuffer--filter-map (kbd "C-o") 'next-multiframe-window)

(tooltip-mode      1)
(menu-bar-mode 1) 
(tool-bar-mode     -1) ;; отключаем tool-bar

;;(blink-cursor-mode -1) ;; курсор не мигает
;;(setq use-dialog-box     nil) ;; никаких графических диалогов и окон - все через минибуфер
(setq redisplay-dont-pause t)  ;; лучшая отрисовка буфера
;;(setq ring-bell-function 'ignore) ;; отключить звуковой сигнал


;;(setq scroll-margin            10) ;; сдвигать буфер верх/вниз когда курсор в 10 шагах от верхней/нижней границы  
(setq scroll-conservatively 10000)
;(load-theme 'spacemacs-dark t)
(load-theme 'light-blue t)
;; для рефакторинга кода
;;    Run M-x swiper-all type your regex, it will list all results, you can move with up/down to see a preview for each result.
;; Now press M-q and it will ask you what you want to replace the matches with, type it and press enter.
   ;; It will now walk you through an interactive replace, you can use  y/n/! on each, y to replace, n to skip, and ! to replace all without asking.

;;M-x swipper-all
;;набираешь то что необходимо заменить
;;M-q
;;набираешь то на что хочешь заменить
;;идет опрос типо тут надо а тут не надо нажимаешь для каждого у н или ! для всего

(defalias 'yes-or-no-p 'y-or-n-p)



;; (defun next-code-buffer ()
;;   (interactive)
;;   (let (( bread-crumb (buffer-name) ))
;;     (next-buffer)
;;     (while
;;         (and
;; 	 (string-match-p "^\*" (buffer-name))

;;          (not ( equal bread-crumb (buffer-name) )) )
;;       (next-buffer))))
;; (global-set-key [remap next-buffer] 'next-code-buffer)

 (defface font-lock-func-face 
     '((nil (:foreground "#7F0055" :weight bold))
       (t (:bold t :italic t)))
   "Font Lock mode face used for function calls."
   :group 'font-lock-highlighting-faces)

;; (font-lock-add-keywords 
;;   'emacs-lisp-mode
;;   '(("(\\s-*\\(\\_<\\(?:\\sw\\|\\s_\\)+\\)\\_>"
;;      1 'font-lock-func-face)))


;;backup files

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:family "Fira Code" :foundry "CTDB" :slant normal :weight normal :height 110 :width normal)))))


;;; Treemacs
;;(add-hook 'prog-mode-hook (lambda () (idle-highlight-mode t)))
(add-hook 'treemacs-mode-hook (lambda () (text-scale-decrease 2)))
(add-hook 'treemacs-mode-hook (lambda() (display-line-numbers-mode -1)))

(global-set-key (kbd "<f10>") 'treemacs)

(setq treemacs-width 23)
(setq treemacs-width-is-initially-locked nil)

;;(set-window-scroll-bars 'treemacs-window nil)
 (font-lock-add-keywords 'c-mode
 			'(("\\<\\([a-zA-Z_]*\\) *("  1 font-lock-keyword-face)))
 (font-lock-add-keywords 'c++-mode
 			'(("\\<\\([a-zA-Z_]*\\) *("  1 font-lock-keyword-face)))

; (global-set-key (kbd "<f12>") 'helm-etags-select)
 (global-set-key (kbd "M-/") 'xref-find-references)

;; (setq c-default-style "bsd"
;;       c-basic-offset 8)

(require 'lsp-mode)
(add-hook 'go-mode-hook #'lsp-deferred)

;; Set up before-save hooks to format buffer and add/delete imports.
;; Make sure you don't have other gofmt/goimports hooks enabled.
(defun lsp-go-install-save-hooks ()
  (add-hook 'before-save-hook #'lsp-format-buffer t t)
  (add-hook 'before-save-hook #'lsp-organize-imports t t))
(add-hook 'go-mode-hook #'lsp-go-install-save-hooks)

(put 'upcase-region 'disabled nil)

(setq mouse-wheel-scroll-amount '(3 ((shift) . 3)))
 ; one line at a time
(setq mouse-wheel-progressive-speed nil)            ; don't accelerate scrolling
(setq-default smooth-scroll-margin 0)
(setq scroll-step 1
      scroll-margin 1
      scroll-conservatively 100000)
(setq backup-directory-alist
      '((".*" . "~/.emacs.d/backups/")))

(setq auto-save-file-name-transforms
      '((".*" "~/.emacs.d/backups/" t)))

(setq create-lockfiles nil)
(fringe-mode '(8 . 0))


(defun fira-code-mode--make-alist (list)
  "Generate prettify-symbols alist from LIST."
  (let ((idx -1))
    (mapcar
     (lambda (s)
       (setq idx (1+ idx))
       (let* ((code (+ #Xe100 idx))
          (width (string-width s))
          (prefix ())
          (suffix '(?\s (Br . Br)))
          (n 1))
     (while (< n width)
       (setq prefix (append prefix '(?\s (Br . Bl))))
       (setq n (1+ n)))
     (cons s (append prefix suffix (list (decode-char 'ucs code))))))
     list)))

(defconst fira-code-mode--ligatures
  '("www" "**" "***" "**/" "*>" "*/" "\\\\" "\\\\\\"
    "{-" "[]" "::" ":::" ":=" "!!" "!=" "!==" "-}"
    "--" "---" "-->" "->" "->>" "-<" "-<<" "-~"
    "#{" "#[" "##" "###" "####" "#(" "#?" "#_" "#_("
    ".-" ".=" ".." "..<" "..." "?=" "??" ";;" "/*"
    "/**" "/=" "/==" "/>" "//" "///" "&&" "||" "||="
    "|=" "|>" "^=" "$>" "++" "+++" "+>" "=:=" "=="
    "===" "==>" "=>" "=>>" "<=" "=<<" "=/=" ">-" ">="
    ">=>" ">>" ">>-" ">>=" ">>>" "<*" "<*>" "<|" "<|>"
    "<$" "<$>" "<!--" "<-" "<--" "<->" "<+" "<+>" "<="
    "<==" "<=>" "<=<" "<>" "<<" "<<-" "<<=" "<<<" "<~"
    "<~~" "</" "</>" "~@" "~-" "~=" "~>" "~~" "~~>" "%%"
    "x" ":" "+" "+" "*"))

(defvar fira-code-mode--old-prettify-alist)

(defun fira-code-mode--enable ()
  "Enable Fira Code ligatures in current buffer."
  (setq-local fira-code-mode--old-prettify-alist prettify-symbols-alist)
  (setq-local prettify-symbols-alist (append (fira-code-mode--make-alist fira-code-mode--ligatures) fira-code-mode--old-prettify-alist))
  (prettify-symbols-mode t))

(defun fira-code-mode--disable ()
  "Disable Fira Code ligatures in current buffer."
  (setq-local prettify-symbols-alist fira-code-mode--old-prettify-alist)
  (prettify-symbols-mode -1))

(define-minor-mode fira-code-mode
  "Fira Code ligatures minor mode"
  :lighter " Fira Code"
  (setq-local prettify-symbols-unprettify-at-point 'right-edge)
  (if fira-code-mode
      (fira-code-mode--enable)
    (fira-code-mode--disable)))

(defun fira-code-mode--setup ()
  "Setup Fira Code Symbols"
  (set-fontset-font t '(#Xe100 . #Xe16f) "Fira Code Symbol"))

(provide 'fira-code-mode)

(add-hook 'prog-mode-hook (lambda () (fira-code-mode t)))
;;(load-theme 'spacemacs-dark t)

(require 'lsp-ui)
(define-key lsp-ui-mode-map [remap xref-find-definitions] #'lsp-ui-peek-find-definitions)
(define-key lsp-ui-mode-map [remap xref-find-references] #'lsp-ui-peek-find-references)
;;(doom-modeline-mode t)
;;(setq doom-modeline-height 20)
(smart-mode-line-enable t)
;;(load "/usr/share/emacs/site-lisp/clang-format-12/clang-format.el")
;;(global-set-key [C-M-tab] 'clang-format-region)
(setq indent-tabs-mode nil)
(setq show-trailing-whitespace t)

;;;; LSP
(setq gc-cons-threshold (* 100 1024 1024)
      read-process-output-max (* 1024 1024)
      treemacs-space-between-root-nodes nil
      company-minimum-prefix-length 1
      lsp-lens-enable t
      lsp-signature-auto-activate nil
      lsp-ui-doc-include-signature t
					; lsp-enable-indentation nil ; uncomment to use cider indentation instead of lsp
					; lsp-enable-completion-at-point nil ; uncomment to use cider completion instead of lsp
      )
(require 'lsp-clangd)
;;(setq lsp-clients-clangd-args "--header-insertion-decorators=0"
;;			       "--background-index")
(setq load-prefer-newer t)

(setq c-default-style "linux"
          c-basic-offset 4)
 (require 'cc-mode)
    (add-to-list 'c-mode-common-hook
      (lambda () (setq c-syntactic-indentation nil)))
;;(define-key  (kbd "TAB") 'clang-format-region)

(when (display-graphic-p)
  (require 'all-the-icons))
;; or
(use-package all-the-icons
  :if (display-graphic-p))
;;(setq company-posframe-mode t)
